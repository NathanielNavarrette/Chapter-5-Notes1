     1                                  ;
     2                                  ; file: sub1.asm
     3                                  ; Subprogram example program
     4                                  
     5                                  %include "asm_io.inc"
     6                              <1> 	extern  read_int, print_int, print_string
     7                              <1> 	extern	read_char, print_char, print_nl
     8                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     9                              <1> 
    10                              <1> %macro 	dump_regs 1
    11                              <1> 	push	  dword %1
    12                              <1> 	call	  sub_dump_regs
    13                              <1> %endmacro
    14                              <1> 
    15                              <1> 
    16                              <1> ;
    17                              <1> ; usage: dump_mem label, start-address, # paragraphs
    18                              <1> %macro  dump_mem 3
    19                              <1> 	push	 dword %1
    20                              <1> 	push	 dword %2
    21                              <1> 	push	 dword %3
    22                              <1> 	call	 sub_dump_mem
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro	dump_math 1
    26                              <1> 	push	 dword %1
    27                              <1> 	call	 sub_dump_math
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro  dump_stack 3
    31                              <1> 	push	 dword %3
    32                              <1>         push     dword %2
    33                              <1> 	push	 dword %1
    34                              <1>         call     sub_dump_stack
    35                              <1> %endmacro
    36                                  
    37                                  segment .data
    38 00000000 456E7465722061206E-     prompt1 db    "Enter a number: ", 0       ; don't forget nul terminator
    39 00000009 756D6265723A2000   
    40 00000011 456E74657220616E6F-     prompt2 db    "Enter another number: ", 0
    41 0000001A 74686572206E756D62-
    42 00000023 65723A2000         
    43 00000028 596F7520656E746572-     outmsg1 db    "You entered ", 0
    44 00000031 65642000           
    45 00000035 20616E642000            outmsg2 db    " and ", 0
    46 0000003B 2C207468652073756D-     outmsg3 db    ", the sum of these is ", 0
    47 00000044 206F66207468657365-
    48 0000004D 2069732000         
    49                                  
    50                                  segment .bss
    51                                  ;
    52                                  ; These labels refer to double words used to store the inputs
    53                                  ;
    54 00000000 <res 00000004>          input1  resd 1
    55 00000004 <res 00000004>          input2  resd 1
    56                                  
    57                                   
    58                                  
    59                                  segment .text
    60                                          global  asm_main
    61                                  asm_main:
    62 00000000 C8000000                        enter   0,0               ; setup routine
    63 00000004 60                              pusha
    64                                  
    65 00000005 B8[00000000]                    mov     eax, prompt1      ; print out prompt
    66 0000000A E8(00000000)                    call    print_string
    67                                  
    68 0000000F BB[00000000]                    mov     ebx, input1       ; store address of input1 into ebx
    69 00000014 E818000000              	call	get_int
    70 00000019 FF35[00000000]          	push    dword [input1]
    71 0000001F E815000000              	call    _fact
    72 00000024 E8(00000000)                    call    print_int
    73                                  
    74 00000029 61                              popa
    75 0000002A B800000000                      mov     eax, 0            ; return back to C
    76 0000002F C9                              leave                     
    77 00000030 C3                              ret
    78                                  ;
    79                                  ; subprogram get_int
    80                                  ; Parameters:
    81                                  ;   ebx - address of dword to store integer into
    82                                  ;   ecx - address of instruction to return to
    83                                  ; Notes:
    84                                  ;   value of eax is destroyed
    85                                  get_int:
    86 00000031 E8(00000000)                      call    read_int
    87 00000036 8903                              mov     [ebx], eax         ; store input into memory
    88 00000038 C3                                ret                        ; jump back to caller
    89                                  ; finds n!
    90                                  
    91                                  _fact:
    92 00000039 C8000000                	enter 0,0
    93                                  b1:
    94 0000003D 8B4508                   	mov eax, [ebp+8] ; eax = n
    95 00000040 83F801                  	cmp eax, 1
    96 00000043 760D                    	jbe term_cond ; if n <= 1, terminate
    97 00000045 48                      	dec eax
    98 00000046 50                      	push eax
    99 00000047 E8EDFFFFFF              	call _fact ; eax = fact(n-1)
   100 0000004C 59                      	pop ecx ; answer in eax
   101 0000004D F76508                  	mul dword [ebp+8] ; edx:eax = eax * [ebp+8]
   102 00000050 EB05                    	jmp short end_fact
   103                                  term_cond:
   104 00000052 B801000000              	mov eax, 1
   105                                  end_fact:
   106 00000057 C9                      	leave
   107 00000058 C3                      	ret
