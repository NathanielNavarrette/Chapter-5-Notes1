     1                                  
     2                                  
     3                                  ;
     4                                  ; file: sub4.asm
     5                                  ; Subprogram example
     6                                  
     7                                  %include "asm_io.inc"
     8                              <1> 	extern  read_int, print_int, print_string
     9                              <1> 	extern	read_char, print_char, print_nl
    10                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    11                              <1> 
    12                              <1> %macro 	dump_regs 1
    13                              <1> 	push	  dword %1
    14                              <1> 	call	  sub_dump_regs
    15                              <1> %endmacro
    16                              <1> 
    17                              <1> 
    18                              <1> ;
    19                              <1> ; usage: dump_mem label, start-address, # paragraphs
    20                              <1> %macro  dump_mem 3
    21                              <1> 	push	 dword %1
    22                              <1> 	push	 dword %2
    23                              <1> 	push	 dword %3
    24                              <1> 	call	 sub_dump_mem
    25                              <1> %endmacro
    26                              <1> 
    27                              <1> %macro	dump_math 1
    28                              <1> 	push	 dword %1
    29                              <1> 	call	 sub_dump_math
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> %macro  dump_stack 3
    33                              <1> 	push	 dword %3
    34                              <1>         push     dword %2
    35                              <1> 	push	 dword %1
    36                              <1>         call     sub_dump_stack
    37                              <1> %endmacro
    38                                  
    39                                  ;
    40                                  ; subprogram get_int
    41                                  ; Parameters (in order pushed on stack)
    42                                  ;   number of input (at [ebp + 12])
    43                                  ;   address of word to store input into (at [ebp + 8])
    44                                  ; Notes:
    45                                  ;   values of eax and ebx are destroyed
    46                                  segment .data
    47 00000000 2920456E7465722061-     prompt  db      ") Enter an integer number (0 to quit): ", 0
    48 00000009 6E20696E7465676572-
    49 00000012 206E756D6265722028-
    50 0000001B 3020746F2071756974-
    51 00000024 293A2000           
    52                                  
    53                                  segment .bss
    54                                  
    55                                   
    56                                  
    57                                  segment .text
    58                                          global  get_int, print_sum
    59                                  get_int:
    60 00000000 C8000000                        enter   0,0
    61                                  
    62 00000004 8B450C                          mov     eax, [ebp + 12]
    63 00000007 E8(00000000)                    call    print_int
    64                                  
    65 0000000C B8[00000000]                    mov     eax, prompt
    66 00000011 E8(00000000)                    call    print_string
    67                                          
    68 00000016 E8(00000000)                    call    read_int
    69 0000001B 8B5D08                          mov     ebx, [ebp + 8]
    70 0000001E 8903                            mov     [ebx], eax         ; store input into memory
    71                                  
    72 00000020 C9                              leave
    73 00000021 C3                              ret                        ; jump back to caller
    74                                  
    75                                  ; subprogram print_sum
    76                                  ; prints out the sum
    77                                  ; Parameter:
    78                                  ;   sum to print out (at [ebp+8])
    79                                  ; Note: destroys value of eax
    80                                  ;
    81                                  segment .data
    82 00000028 5468652073756D2069-     result  db      "The sum is ", 0
    83 00000031 732000             
    84                                  
    85                                  segment .text
    86                                  print_sum:
    87 00000022 C8000000                        enter   0,0
    88                                  
    89 00000026 B8[28000000]                    mov     eax, result
    90 0000002B E8(00000000)                    call    print_string
    91                                  
    92 00000030 8B4508                          mov     eax, [ebp+8]
    93 00000033 E8(00000000)                    call    print_int
    94 00000038 E8(00000000)                    call    print_nl
    95                                  
    96 0000003D C9                              leave
    97 0000003E C3                              ret
    98                                  
    99                                  
   100                                  
   101                                  
   102                                  
   103                                  
