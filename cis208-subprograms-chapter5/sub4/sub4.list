     1                                  ;
     2                                  ; file: sub4.asm
     3                                  ; Subprogram example
     4                                  
     5                                  %include "asm_io.inc"
     6                              <1> 	extern  read_int, print_int, print_string
     7                              <1> 	extern	read_char, print_char, print_nl
     8                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     9                              <1> 
    10                              <1> %macro 	dump_regs 1
    11                              <1> 	push	  dword %1
    12                              <1> 	call	  sub_dump_regs
    13                              <1> %endmacro
    14                              <1> 
    15                              <1> 
    16                              <1> ;
    17                              <1> ; usage: dump_mem label, start-address, # paragraphs
    18                              <1> %macro  dump_mem 3
    19                              <1> 	push	 dword %1
    20                              <1> 	push	 dword %2
    21                              <1> 	push	 dword %3
    22                              <1> 	call	 sub_dump_mem
    23                              <1> %endmacro
    24                              <1> 
    25                              <1> %macro	dump_math 1
    26                              <1> 	push	 dword %1
    27                              <1> 	call	 sub_dump_math
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro  dump_stack 3
    31                              <1> 	push	 dword %3
    32                              <1>         push     dword %2
    33                              <1> 	push	 dword %1
    34                              <1>         call     sub_dump_stack
    35                              <1> %endmacro
    36                                  
    37                                  ;
    38                                  ; subprogram get_int
    39                                  ; Parameters (in order pushed on stack)
    40                                  ;   number of input (at [ebp + 12])
    41                                  ;   address of word to store input into (at [ebp + 8])
    42                                  ; Notes:
    43                                  ;   values of eax and ebx are destroyed
    44                                  segment .data
    45 00000000 2920456E7465722061-     prompt  db      ") Enter an integer number (0 to quit): ", 0
    46 00000009 6E20696E7465676572-
    47 00000012 206E756D6265722028-
    48 0000001B 3020746F2071756974-
    49 00000024 293A2000           
    50                                  
    51                                  segment .bss
    52                                  
    53                                   
    54                                  
    55                                  segment .text
    56                                          global  get_int, print_sum
    57                                  get_int:
    58 00000000 C8000000                        enter   0,0
    59                                  
    60 00000004 8B450C                          mov     eax, [ebp + 12]
    61 00000007 E8(00000000)                    call    print_int
    62                                  
    63 0000000C B8[00000000]                    mov     eax, prompt
    64 00000011 E8(00000000)                    call    print_string
    65                                          
    66 00000016 E8(00000000)                    call    read_int
    67 0000001B 8B5D08                          mov     ebx, [ebp + 8]
    68 0000001E 8903                            mov     [ebx], eax         ; store input into memory
    69                                  
    70 00000020 C9                              leave
    71 00000021 C3                              ret                        ; jump back to caller
    72                                  
    73                                  ; subprogram print_sum
    74                                  ;   sum to print out (at [ebp+8])
    75                                  ; Note: destroys value of eax
    76                                  ;
    77                                  segment .data
    78 00000028 5468652073756D2069-     result  db      "The sum is ", 0
    79 00000031 732000             
    80                                  
    81                                  segment .text
    82                                  print_sum:
    83 00000022 C8000000                        enter   0,0
    84                                  
    85 00000026 B8[28000000]                    mov     eax, result
    86 0000002B E8(00000000)                    call    print_string
    87                                  
    88 00000030 8B4508                          mov     eax, [ebp+8]
    89 00000033 E8(00000000)                    call    print_int
    90 00000038 E8(00000000)                    call    print_nl
    91                                  
    92 0000003D C9                              leave
    93 0000003E C3                              ret
    94                                  
