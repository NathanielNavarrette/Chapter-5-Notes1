     1                                  ;
     2                                  ; file: asm_main.asm
     3                                  
     4                                  %include "asm_io.inc"
     5                              <1> 	extern  read_int, print_int, print_string
     6                              <1> 	extern	read_char, print_char, print_nl
     7                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     8                              <1> 
     9                              <1> %macro 	dump_regs 1
    10                              <1> 	push	  dword %1
    11                              <1> 	call	  sub_dump_regs
    12                              <1> %endmacro
    13                              <1> 
    14                              <1> 
    15                              <1> ;
    16                              <1> ; usage: dump_mem label, start-address, # paragraphs
    17                              <1> %macro  dump_mem 3
    18                              <1> 	push	 dword %1
    19                              <1> 	push	 dword %2
    20                              <1> 	push	 dword %3
    21                              <1> 	call	 sub_dump_mem
    22                              <1> %endmacro
    23                              <1> 
    24                              <1> %macro	dump_math 1
    25                              <1> 	push	 dword %1
    26                              <1> 	call	 sub_dump_math
    27                              <1> %endmacro
    28                              <1> 
    29                              <1> %macro  dump_stack 3
    30                              <1> 	push	 dword %3
    31                              <1>         push     dword %2
    32                              <1> 	push	 dword %1
    33                              <1>         call     sub_dump_stack
    34                              <1> %endmacro
    35                                  ;
    36                                  ; initialized data is put in the .data segment
    37                                  ;
    38                                  segment .data
    39                                  
    40 00000000 456E7465722061206E-     prompt1	db	"Enter a number: ", 0
    41 00000009 756D6265723A2000   
    42 00000011 456E74657220616E6F-     prompt2	db	"Enter another number: ", 0
    43 0000001A 74686572206E756D62-
    44 00000023 65723A2000         
    45                                  
    46 00000028 596F7520656E746572-     outmsg1	db	"You entered ", 0
    47 00000031 65642000           
    48 00000035 20616E642000            outmsg2	db	" and ", 0
    49 0000003B 2C207468652073756D-     outmsg3	db	", the sum of these is: ", 0
    50 00000044 206F66207468657365-
    51 0000004D 2069733A2000       
    52                                  
    53                                  ; uninitialized data is put in the .bss segment
    54                                  ;
    55                                  segment .bss
    56                                  
    57 00000000 <res 00000004>          input1 resd 1
    58 00000004 <res 00000004>          input2 resd 1
    59                                  ;
    60                                  ; code is put in the .text segment
    61                                  ;
    62                                  segment .text
    63                                          global  asm_main
    64                                  
    65                                  asm_main:
    66 00000000 C8000000                        enter   0,0               ; setup routine
    67 00000004 60                              pusha
    68                                  ; next print out result message as series of steps
    69 00000005 B8[00000000]            	mov 	eax, prompt1
    70 0000000A E8(00000000)            	call	print_string
    71                                  
    72 0000000F BB[00000000]            	mov	ebx, input1
    73 00000014 B9[1B000000]            	mov	ecx, ret1
    74                                  
    75 00000019 EB69                    	jmp	short get_int
    76                                  
    77                                  ret1:
    78 0000001B B8[11000000]            	mov 	eax, prompt2 ; print out prompt
    79 00000020 E8(00000000)            	call 	print_string
    80                                  
    81 00000025 BB[04000000]            	mov 	ebx, input2
    82 0000002A B9[31000000]            	mov 	ecx, $ + 7 ; ecx = this address + 7
    83                                  
    84 0000002F EB53                     	jmp 	short get_int
    85                                  
    86 00000031 A1[00000000]             	mov 	eax, [input1] ; eax = dword at input1
    87 00000036 0305[04000000]           	add 	eax, [input2] ; eax += dword at input2
    88 0000003C 89C3                     	mov 	ebx, eax ; ebx = eax
    89                                  
    90 0000003E B8[28000000]            	mov 	eax, outmsg1
    91 00000043 E8(00000000)            	call 	print_string ; print out first message
    92                                  
    93 00000048 A1[00000000]            	mov 	eax, [input1]
    94 0000004D E8(00000000)             	call 	print_int ; print out input1
    95                                  
    96 00000052 B8[35000000]             	mov 	eax, outmsg2
    97 00000057 E8(00000000)             	call 	print_string ; print out second message
    98                                  
    99 0000005C A1[04000000]             	mov 	eax, [input2]
   100 00000061 E8(00000000)             	call 	print_int ; print out input2
   101                                  
   102 00000066 B8[3B000000]             	mov 	eax, outmsg3
   103 0000006B E8(00000000)             	call 	print_string ; print out third message
   104                                  
   105 00000070 89D8                     	mov 	eax, ebx
   106 00000072 E8(00000000)            	call 	print_int ; print out sum (ebx)
   107 00000077 E8(00000000)             	call 	print_nl ; print new-line
   108                                  
   109 0000007C 61                      	popa
   110 0000007D B800000000              	mov 	eax, 0 ; return back to C
   111 00000082 C9                      	leave
   112 00000083 C3                      	ret
   113                                  
   114                                  ;subprogram get_int
   115                                  ;parameters:
   116                                  ;	bex - address of dword to store integer into
   117                                  ;	ecx - address of instruction to return to
   118                                  ; Notes:
   119                                  ;	Value of eax is destroyed
   120                                  get_int:
   121 00000084 E8(00000000)            	call	read_int
   122 00000089 8903                    	mov	[ebx], eax
   123 0000008B FFE1                    	jmp	ecx
